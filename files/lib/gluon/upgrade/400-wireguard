#!/usr/bin/lua
local site = require 'gluon.site_config'
local users = require 'gluon.users'
local util = require 'gluon.util'

local uci = require('simple-uci').cursor()

local enabled = uci:get('wireguard', 'wireguard', 'enabled')
if not enabled then
  enabled = site.wireguard.enabled or false
end

uci:section('wireguard', 'wireguard', 'wireguard', {
	enabled='1',
	iface='wg0',
	v6='1',
	v4='0',
	batman='1',
	secret='',
	port='10099',
})
-- secret has to be set and saved to file by another script (it has to be in a file because wg need it)

-- delete old mesh servers regardless everything, that also means that changes are not upgradesave
-- uci:delete_all('wireguard', 'peer',
--    function(peer)
--      return (peer.net == 'peer' and peer.group == name)
--    end
--  )

-- wireguard.mesh1=peer
-- wireguard.mesh1.PublicKey='Gqntn/96zfRrz6SedcNXzw7b+vyjn6IfZlFM8+6U63E='
-- enabled='1'
-- wireguard.mesh1.Endpoint='136.243.153.228:10099'
-- wireguard.mesh1.AllowedIps='0.0.0.0/0,::/0'

-- HELP NEEDED ... i dunno how to automate the wireguard = { peer = { mesh1 = { allthenicethings
-- for mesh1 to mesh<whatever>
--local function addpeer(PublicKey, enabled, Endpoint, AllowedIps)
--	uci section('wireguard','peer', name
--		{
--			PublicKey = site.wireguard. .. name .. .PublicKey,
--			enabled = site.wireguard. .. name .. .enabled,
--			gretapip = site.wireguard. .. name .. .enabled,
--			Endpoint = site.wireguard. .. name .. .Endpoint,
--			AllowedIps = site.wireguard. .. name .. .AllowedIps,
--		}
--	),
--end

-- do it by hand 
uci:section('wireguard','peer', 'mesh1', {
	PublicKey = site.wireguard.mesh1.PublicKey,
	enabled = site.wireguard.mesh1.enabled,
	gretapip = site.wireguard.mesh1.enabled,
	Endpoint = site.wireguard.mesh1.Endpoint,
	AllowedIps = site.wireguard.mesh1.AllowedIps,
	}
)

add_groups('wireguard', site.wireguard.peer)

uci:save('wireguard')

-- i dont know if the following is needed, because we use main script
-- and also we need the ip6gretap stuff which may be a different if
-- uci:section('network', 'interface', 'wg0',
--  {
--    ifname = site.wireguard.wireguard.iface,
--    proto = 'wireguard',
--    transitive = true,
--    fixed_mtu = true,
--    macaddr = util.generate_mac(7),
--  }
-- )
-- uci:save('network')

-- we may want some iptable/firewall rules

